"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importStar(require("react"));
const Props_types_1 = require("./Props.types");
const ScrollContext_1 = require("./ScrollContext");
const scrollHandlerStateInitialState = {
    currentChildIndex: 0,
    scrollState: {
        YDirection: 'stationary',
        XDirection: 'stationary',
    },
    childs: [],
    pagesContainer: null,
    direction: Props_types_1.ScrollDirections.vertical,
    scrollEnabled: false,
    animationDuration: 400,
    isRoot: false,
};
function ScrollingSection({ children, scrollEnabled = false, animationDuration = 400, animationEasing = 'cubic-bezier(0.76, 0, 0.24, 1)', direction = Props_types_1.ScrollDirections.vertical, isRoot = false, width = '100vw', height = '100vh', onScrollStart = () => { }, onScrollInit = () => { }, onScrollCommandCede = () => { }, onScrollEnd = () => { }, }) {
    const scrollStateRef = (0, react_1.useRef)(Object.assign(Object.assign({}, scrollHandlerStateInitialState), { direction,
        scrollEnabled,
        animationDuration,
        isRoot,
        onScrollStart,
        onScrollEnd,
        onScrollInit,
        onScrollCommandCede }));
    const scrollContainerRef = (0, react_1.useRef)(null);
    const scrollSubscribed = (0, react_1.useRef)(false);
    const { scrollManager, scrollContext } = (0, ScrollContext_1.useScrollContext)();
    (0, react_1.useEffect)(() => {
        if (scrollManager && !scrollSubscribed.current) {
            const containerRef = scrollContainerRef.current;
            let scrollState = scrollStateRef.current;
            if (containerRef) {
                const pagesContainerAsNodes = containerRef.childNodes[0];
                const pagesContainer = pagesContainerAsNodes;
                const childsAsNodes = pagesContainer.childNodes;
                const childs = childsAsNodes;
                scrollState = Object.assign(Object.assign({}, scrollState), { pagesContainer,
                    childs });
                scrollManager.subscribe(scrollContainerRef.current, scrollState);
                scrollSubscribed.current = true;
            }
        }
    }, [scrollManager, isRoot]);
    if (!scrollContext && !isRoot) {
        throw new Error('Only use <NestedPageScroll> inside <PageScroll>');
    }
    return (react_1.default.createElement("div", { style: {
            width,
            height,
            overflow: 'hidden',
            position: 'relative',
        } },
        react_1.default.createElement("div", { ref: scrollContainerRef, style: {
                width: '100%',
                height: '100%',
                overflow: 'hidden',
                position: 'absolute',
            } },
            react_1.default.createElement("div", { style: {
                    transition: `transform ${animationDuration}ms ${animationEasing}`,
                }, className: (direction === 'vertical' ? 'flex-col' : 'flex') + ' scroll-container' }, children))));
}
exports.default = ScrollingSection;
